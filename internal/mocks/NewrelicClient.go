// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import http "net/http"

import mock "github.com/stretchr/testify/mock"

// NewrelicClient is an autogenerated mock type for the NewrelicClient type
type NewrelicClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path
func (_m *NewrelicClient) Delete(path string) (*http.Response, error) {
	ret := _m.Called(path)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: path
func (_m *NewrelicClient) Get(path string) (*http.Response, error) {
	ret := _m.Called(path)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJson provides a mock function with given fields: path
func (_m *NewrelicClient) GetJson(path string) (*http.Response, error) {
	ret := _m.Called(path)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostJson provides a mock function with given fields: path, payload
func (_m *NewrelicClient) PostJson(path string, payload []byte) (*http.Response, error) {
	ret := _m.Called(path, payload)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, []byte) *http.Response); ok {
		r0 = rf(path, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(path, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutJson provides a mock function with given fields: path, payload
func (_m *NewrelicClient) PutJson(path string, payload []byte) (*http.Response, error) {
	ret := _m.Called(path, payload)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, []byte) *http.Response); ok {
		r0 = rf(path, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(path, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
